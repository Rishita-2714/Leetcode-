Reveal cards in increasing order
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

/*
pg 86, chap 4 of 'Data Structures and C Programs', Christopher J Van Wyk
same kinda thing i just wanna implement the data structure manually once or twice for my edification.
*/

//queue implementation
typedef struct qNode qNode;
void enQ(int value, qNode** qHead, qNode** qTail);
int head(const qNode* qHead);
void deQ(qNode** qHead, qNode** qTail);
bool isEmpty(const qNode* qHead);

//we sort
int cmpfunc(const void * a, const void * b);

struct qNode {
    qNode* next;
    int val;
};

void enQ(int value, qNode** qHead, qNode** qTail) {
    qNode* newNode = (qNode*) malloc(sizeof(qNode));
    if (newNode == NULL) {
        printf("Error enQ: malloc failed!\n");
        exit(1);
    }
    newNode->val = value;
    newNode->next = NULL;

    if (isEmpty(*qHead)) {
        *qHead = *qTail = newNode; //check all the *dereferencing
    }
    else {
        (*qTail)->next = newNode;
        *qTail = newNode;
    }
}

int head(const qNode* qHead) {
    if (isEmpty(qHead)) {
        printf("Error head: qHead is empty!\n");
        exit(1);
    }
    else {
        return qHead->val;
    }
}

void deQ(qNode** qHead, qNode** qTail) {
    if (isEmpty(*qHead)) {
        printf("Error deQ: q is empty!\n");
        exit(1);
    }
    qNode* tmp = *qHead;
    *qHead = (*qHead)->next;
    free(tmp);
    if (*qHead == NULL)
        *qTail = NULL;
}

bool isEmpty(const qNode* qHead) {
    return (qHead == NULL);
}

int cmpfunc(const void * a, const void * b) {
    const int *A = a;
    const int *B = b;

    if (*A > *B) {
        return 1;
    } else if (*A < *B) {
        return -1;
    } else {
        return 0;
    }
}
 
int* deckRevealedIncreasing(int* deck, int deckSize, int* returnSize) {
    qsort(deck, deckSize, sizeof(int), cmpfunc);

    qNode* indexHead = NULL; qNode* indexTail = NULL; //build the queue
    for (int i = 0; i < deckSize; ++i) {
        enQ(i, &indexHead, &indexTail); //queue stores indices of numbers in sorted array, and we populate result accordingly
    }

    int* ans = (int*)malloc(deckSize * sizeof(int)); //build result array
    *returnSize = deckSize;

    for (int i = 0; i < deckSize; ++i) {
        int curIndex = head(indexHead); //variables to keep track of as we simlutate
        deQ(&indexHead, &indexTail);
        int curCard = deck[i];

        ans[curIndex] = curCard;

        if (!isEmpty(indexHead)) {
            int tmpIndex = head(indexHead);
            deQ(&indexHead, &indexTail);
            enQ(tmpIndex, &indexHead, &indexTail);
        }
    }

    return ans;
}
